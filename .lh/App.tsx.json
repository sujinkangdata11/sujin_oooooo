{
    "sourceFile": "App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756017036804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756017036804,
            "name": "Commit-0",
            "content": "/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n*/\n/* tslint:disable */\n// Copyright 2024 Google LLC\n\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     https://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport c from 'classnames';\nimport {useRef, useState, useEffect} from 'react';\nimport {generateContent} from './api';\nimport {generateVoice, playAudioBuffer} from './tts';\nimport functions from './functions';\nimport modes from './modes';\nimport {timeToSecs} from './utils';\n\nimport VideoPlayer from './VideoPlayer.jsx';\n\n\nfunction extractYoutubeId(url) {\n  if (!url) return null;\n  const regExp =\n    /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|shorts\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\n  const match = url.match(regExp);\n  return match && match[2].length === 11 ? match[2] : null;\n}\n\nexport default function App() {\n  const [youtubeUrlInput, setYoutubeUrlInput] = useState('');\n  const [youtubeVideoId, setYoutubeVideoId] = useState(null);\n  const [timecodeList, setTimecodeList] = useState(null);\n  const [requestedTimecode, setRequestedTimecode] = useState(null);\n  const [selectedMode, setSelectedMode] = useState(Object.keys(modes)[0]);\n  const [activeMode, setActiveMode] = useState<string | undefined>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSidebar, setShowSidebar] = useState(true);\n  const [customPrompt, setCustomPrompt] = useState('');\n  const [apiKey, setApiKey] = useState('');\n  const [uploadedFiles, setUploadedFiles] = useState({\n    example1: null,\n    example2: null,\n    example3: null\n  });\n  const [expandedModes, setExpandedModes] = useState<Record<string, boolean>>({});\n  const [uploadedVideo, setUploadedVideo] = useState<File | null>(null);\n  const [inputMode, setInputMode] = useState<'url' | 'upload'>('url');\n  const [selectedLanguage, setSelectedLanguage] = useState<string>('한국어');\n  const [analysisResult, setAnalysisResult] = useState<string>('');\n  const [rewrittenResult, setRewrittenResult] = useState<string>('');\n  const [isLoadingRewrite, setIsLoadingRewrite] = useState<boolean>(false);\n  const [expandedAnalysis, setExpandedAnalysis] = useState<string>('');\n  const [selectedAnalysisType, setSelectedAnalysisType] = useState<string>('');\n  const [customAnalysisPrompt, setCustomAnalysisPrompt] = useState<string>('');\n  \n  // 4번째 칼럼용 상태\n  const [selectedLanguage2, setSelectedLanguage2] = useState<string>('한국어');\n  const [analysisResult2, setAnalysisResult2] = useState<string>('');\n  const [expandedAnalysis2, setExpandedAnalysis2] = useState<string>('');\n  const [selectedAnalysisType2, setSelectedAnalysisType2] = useState<string>('');\n  const [customAnalysisPrompt2, setCustomAnalysisPrompt2] = useState<string>('');\n  \n  // 5번째 칼럼용 상태\n  const [selectedLanguage3, setSelectedLanguage3] = useState<string>('한국어');\n  const [analysisResult3, setAnalysisResult3] = useState<string>('');\n  const [expandedAnalysis3, setExpandedAnalysis3] = useState<string>('');\n  const [selectedAnalysisType3, setSelectedAnalysisType3] = useState<string>('');\n  const [customAnalysisPrompt3, setCustomAnalysisPrompt3] = useState<string>('');\n  \n  // 음성 선택 상태\n  const voiceOptions = [\n    'youngsu', 'changhee', 'jimin', 'sujin', 'minjun',\n    'yena', 'jihun', 'eunji', 'yejun', 'hunyoung',\n    'yejin', 'minjin', 'jihyun', 'eunsu', 'yedam'\n  ];\n  const [selectedVoice, setSelectedVoice] = useState<string>('youngsu');\n  \n  const handleFileUpload = (fileNumber: string, file: File) => {\n    setUploadedFiles(prev => ({\n      ...prev,\n      [fileNumber]: { name: file.name, file }\n    }));\n  };\n\n  const handleFileDelete = (fileNumber: string) => {\n    setUploadedFiles(prev => ({\n      ...prev,\n      [fileNumber]: null\n    }));\n  };\n\n  const handleRewriteWithExamples = async () => {\n    const uploadedExamples = Object.values(uploadedFiles).filter(file => file !== null);\n    \n    if (uploadedExamples.length === 0) {\n      alert('먼저 예시 파일을 업로드해주세요.');\n      return;\n    }\n\n    if (!analysisResult2) {\n      alert('먼저 대사를 생성해주세요.');\n      return;\n    }\n\n    if (!apiKey.trim()) {\n      alert('Gemini API 키를 입력해주세요.');\n      return;\n    }\n\n    setIsLoadingRewrite(true);\n\n    try {\n      // 업로드된 파일들의 내용을 읽기\n      const exampleContents = await Promise.all(\n        uploadedExamples.map(async (fileData) => {\n          return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n              console.log('파일 읽기 성공:', fileData.name, e.target?.result);\n              resolve(e.target?.result);\n            };\n            reader.onerror = (e) => {\n              console.error('파일 읽기 실패:', fileData.name, e);\n              reject(e);\n            };\n            reader.readAsText(fileData.file);\n          });\n        })\n      );\n\n      console.log('읽어온 예시들:', exampleContents);\n      \n      const examplesText = exampleContents.map((content, index) => \n        `-0${index + 1} 예시-\\n${content}\\n-0${index + 1} 예시 끝-`\n      ).join('\\n\\n');\n\n      const rewritePrompt = `다음은 현재 생성된 대사입니다:\n\n${analysisResult2}\n\n다음은 내가 원하는 스타일의 예시들입니다:\n\n${examplesText}\n\n위 예시들의 스타일을 참고해서 현재 대사를 다시 작성해주세요. 예시들의 톤, 문체, 표현 방식을 분석해서 동일한 스타일로 대사를 재작성해주세요. 각 예시의 분량만큼만 적어주세요. 즉, 공백포함 300자 이내로 적어주세요.`;\n\n      const response = await generateContent(\n        rewritePrompt,\n        [],\n        `https://www.youtube.com/watch?v=${youtubeVideoId}`,\n        apiKey,\n      );\n\n      console.log('재작성 응답:', response);\n      const rewrittenText = response.candidates?.[0]?.content?.parts?.[0]?.text || '재작성 결과를 가져올 수 없습니다.';\n      setRewrittenResult(rewrittenText);\n      \n    } catch (error) {\n      console.error('재작성 에러:', error);\n      alert('재작성 중 오류가 발생했습니다.');\n    } finally {\n      setIsLoadingRewrite(false);\n    }\n  };\n  const [showVoiceDropdown, setShowVoiceDropdown] = useState<boolean>(false);\n  const [isExtractingKeywords, setIsExtractingKeywords] = useState<boolean>(false);\n  const [extractedKeywords, setExtractedKeywords] = useState<string>('');\n  const [isLoadingGenerate, setIsLoadingGenerate] = useState<boolean>(false);\n  const [isLoadingAnalysis, setIsLoadingAnalysis] = useState<boolean>(false);\n  const [isLoadingScript, setIsLoadingScript] = useState<boolean>(false);\n  const [scriptText, setScriptText] = useState<string>('');\n  const [isGeneratingVoice, setIsGeneratingVoice] = useState<boolean>(false);\n  const [generatedAudio, setGeneratedAudio] = useState<ArrayBuffer | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);\n  const [previewAudio, setPreviewAudio] = useState<HTMLAudioElement | null>(null);\n  const [isPreviewPlaying, setIsPreviewPlaying] = useState<string | null>(null);\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const [duration, setDuration] = useState<number>(0);\n  const [theme] = useState(\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n      ? 'dark'\n      : 'light',\n  );\n  const scrollRef = useRef<HTMLElement>(null);\n  \n  // 각 칼럼 ref 추가\n  const videoColumnRef = useRef<HTMLDivElement>(null);\n  const buttonColumnRef = useRef<HTMLDivElement>(null);\n  const whiteColumnRef = useRef<HTMLDivElement>(null);\n  const fourthColumnRef = useRef<HTMLDivElement>(null);\n  const fifthColumnRef = useRef<HTMLDivElement>(null);\n  const sixthColumnRef = useRef<HTMLDivElement>(null);\n  const isCustomMode = selectedMode === '커스텀';\n\n  // 시간 포맷 함수 (초 -> MM:SS)\n  const formatTime = (seconds: number): string => {\n    if (isNaN(seconds)) return '0:00';\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // 순환 로딩 메시지 컴포넌트\n  const LoadingMessage = ({ type = 'default' }: { type?: 'default' | 'voice' }) => {\n    const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\n    \n    const defaultMessages = [\n      \"조금만 기다려주세요.\",\n      \"작업 중입니다\",\n      \"글을 다듬고 있습니다.\"\n    ];\n    \n    const voiceMessages = [\n      \"🔄 음성 생성 중...\",\n      \"조금만 기다려주세요\",\n      \"곧 음성이 나옵니다.\"\n    ];\n    \n    const loadingMessages = type === 'voice' ? voiceMessages : defaultMessages;\n\n    useEffect(() => {\n      const interval = setInterval(() => {\n        setCurrentMessageIndex(prev => (prev + 1) % loadingMessages.length);\n      }, 1500);\n\n      return () => clearInterval(interval);\n    }, [loadingMessages.length]);\n\n    return (\n      <div style={{\n        marginTop: '10px',\n        textAlign: 'center',\n        color: '#666',\n        fontSize: '14px',\n        fontStyle: 'italic'\n      }}>\n        {loadingMessages[currentMessageIndex]}\n      </div>\n    );\n  };\n\n  // 칼럼 중앙 정렬 함수\n  const scrollToColumn = (columnRef: React.RefObject<HTMLDivElement>) => {\n    if (columnRef.current) {\n      columnRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'center'\n      });\n    }\n  };\n\n  const setTimecodes = ({timecodes}) =>\n    setTimecodeList(\n      timecodes.map((t) => ({...t, text: t.text.replaceAll(\"\\\\'\", \"'\")})),\n    );\n\n  const onModeSelect = async (mode: string) => {\n    setActiveMode(mode);\n    // setSelectedMode는 유지 - 사용자가 선택한 모드 그대로 유지\n    setIsLoadingGenerate(true);\n\n    const functionDeclarations = [\n      {\n        name: 'set_timecodes',\n        description: 'Set the timecodes for the video with associated text',\n        parameters: {\n          type: 'object',\n          properties: {\n            timecodes: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  time: { type: 'string' },\n                  text: { type: 'string' }\n                },\n                required: ['time', 'text']\n              }\n            }\n          },\n          required: ['timecodes']\n        }\n      }\n    ];\n\n    const resp = await generateContent(\n      isCustomMode\n        ? modes[mode].prompt(customPrompt)\n        : modes[mode].prompt,\n      functionDeclarations,\n      `https://www.youtube.com/watch?v=${youtubeVideoId}`,\n      apiKey,\n    );\n\n    console.log('응답 객체:', resp);\n    console.log('응답 candidates:', resp.candidates);\n    console.log('첫 번째 candidate:', resp.candidates?.[0]);\n    console.log('candidate content:', resp.candidates?.[0]?.content);\n    console.log('content parts:', resp.candidates?.[0]?.content?.parts);\n    console.log('첫 번째 part:', resp.candidates?.[0]?.content?.parts?.[0]);\n    \n    // 다양한 응답 구조 체크\n    console.log('전체 응답 구조:', JSON.stringify(resp, null, 2));\n    \n    const call = resp.candidates?.[0]?.content?.parts?.[0]?.functionCall || \n                 resp.candidates?.[0]?.content?.parts?.[0]?.function_call ||\n                 resp.functionCalls?.[0] ||\n                 resp.function_calls?.[0];\n    console.log('함수 호출:', call);\n\n    if (call && call.name === 'set_timecodes') {\n      setTimecodes(call.args);\n    } else if (resp.candidates?.[0]?.content?.parts?.[0]?.text) {\n      // 함수 호출이 없으면 일반 텍스트 응답을 timecode로 처리\n      const responseText = resp.candidates[0].content.parts[0].text;\n      setTimecodeList([{\n        time: '0:00',\n        text: responseText\n      }]);\n    }\n\n    setIsLoadingGenerate(false);\n    scrollRef.current?.scrollTo({top: 0});\n  };\n\n  const handleLoadVideo = (e) => {\n    e.preventDefault();\n    const videoId = extractYoutubeId(youtubeUrlInput);\n    if (videoId) {\n      setYoutubeVideoId(videoId);\n      setTimecodeList(null);\n      setActiveMode(null);\n    } else {\n      alert('Invalid YouTube URL. Please enter a valid URL.');\n    }\n  };\n\n  const analysisTypes = {\n    '기본': '이 내용을 한 글자도 빠짐없이 번역해주고, 어떤 상황인지 자연스럽고 디테일하게 전문가처럼 설명해주세요.\\\\n\\\\nex) \\\\n1. 한글번역\\\\n00:02-00:03 ㅣ 이 기구는 정말 놀랍습니다.\\\\n00:03-00:06 ㅣ 밖에서 부터 시작되는 사상초유의\\\\n.\\\\n.\\\\n———————————\\\\n2. 관점에서 설명 시작',\n    '역사적 관점': '이 내용을 한 글자도 빠짐없이 번역해주고, 역사적 관점에서 이 상황이 어떤 상황이고, 어느 나라 문화이며, 어떤 내용에 기인되어 이 상황이 생겼는지, 역사적 관점에서 디테일하게 설명해주세요. 역사적 사실에 기반으로 신뢰성있게 설명해주세요.\\\\n\\\\nex) \\\\n1. 한글번역\\\\n00:02-00:03 ㅣ 이 기구는 정말 놀랍습니다.\\\\n00:03-00:06 ㅣ 밖에서 부터 시작되는 사상초유의\\\\n.\\\\n.\\\\n———————————\\\\n2. 관점에서 설명 시작',\n    '과학적 관점': '이 내용을 한 글자도 빠짐없이 번역해주고, 과학적 관점에서 이 영상의 현상이나 내용을 분석해주세요. 물리학, 화학, 생물학적 원리나 과학적 근거를 바탕으로 상세히 설명해주세요.\\\\n\\\\nex) \\\\n1. 한글번역\\\\n00:02-00:03 ㅣ 이 기구는 정말 놀랍습니다.\\\\n00:03-00:06 ㅣ 밖에서 부터 시작되는 사상초유의\\\\n.\\\\n.\\\\n———————————\\\\n2. 관점에서 설명 시작',\n    '바이럴 쇼츠용': '이 내용을 한 글자도 빠짐없이 번역해주고, 바이럴 쇼츠 제작 관점에서 분석해주세요. 왜 이 영상이 유튜브에 바이럴되고 사람들이 좋아요를 누르거나 댓글이 많이 달리는지 분석해주세요. 또한 가장 흥미로운 순간, 감정적 하이라이트, 짧은 영상에 적합한 클립 포인트를 찾아주세요.\\\\n\\\\nex) \\\\n1. 한글번역\\\\n00:02-00:03 ㅣ 이 기구는 정말 놀랍습니다.\\\\n00:03-00:06 ㅣ 밖에서 부터 시작되는 사상초유의\\\\n.\\\\n.\\\\n———————————\\\\n2. 관점에서 설명 시작',\n    '커스텀': ''\n  };\n\n  const analysisTypes2 = {\n    '기본': '원본 스크립트에 나온 대사와 비슷한 스타일과 느낌, 사람의 감정과 문맥을 그대로 유지하되, 더 후킹되고 시청 지속시간을 유지시킬 수 있는 긴장감과 정보력, 적절한 유머까지 섞어서 대사를 만들어주세요. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '3초 후킹': '원본 스크립트에 나온 대사의 스타일과 문맥을 유지하되, 대사 앞 3초에서 사람들을 끌어 당기는 강력한 후킹문구가 필요하고, 적절한 재치와 긴장감, 정보력을 간단하고 친절하게 알려주세요. 마지막으로 이 내용을 본 사람들이 토론을 할 수 있도록 의견을 묻는 강력한 한마디가 필요합니다. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '정보력 만렙': '원본 스크립트에 나온 대사의 스타일과 문맥을 유지하되, 강력한 3초 후킹문구가 필요합니다. 사람들이 어? 뭐지? 하고 쇼츠를 멈출수 있도록 강력하게 사람들을 붙잡으세요. 정보 지식을 토대로 이 내용을 본 사람들이 이해하기 쉽고 정보를 얻었다는 만족감을 주어야합니다. 적절한 재치와 유머를 곁들이고 신뢰성 높은 근거를 바탕으로 상세히 써주세요. 반드시 의미있는 정보를 가득 넣어서 정보력 높은 대사를 만드세요. 가장 중요합니다. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '바이럴 대사': '이 정보를 타깃은 누구인지, 이 내용을 궁금하거나 좋아하는사람, 댓글쓰는 사람을 위한 대사를 만드세요. 주어진 정보중에 \\'흥미로운 순간\\', \\'감정적 하이라이트\\', \\'매력적인 클립포인트\\'를 기반으로 정말 당신에게 필요한 이야기라는 것을 한마디로 후킹하세요. 이 내용을 본 사람들이 능동적으로 댓글을 달고, 공유할 만한 내용으로 작성하고 시청자들의 의견대립을 위해 마지막 한,두마디를 적어 댓글을 유도하세요. 단 \\'댓글써주세요\\'같은 직접적인것이 아닌, 사람들이 이 내용을 보고 댓글을 적고싶도록 만드는 것이 당신이 적은 이 스크립트의 진정한 목적입니다. 흥미롭고, 매력적이고, 강력한 후킹과 신뢰기반의 정보를 바탕으로 대사를 쓰세요. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '커스텀': ''\n  };\n\n  const analysisTypes3 = {\n    '기본': '원본 스크립트와 4번째 칼럼 결과를 참고해서 새로운 대사를 만들어주세요. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '감정적 몰입': '원본 스크립트와 4번째 칼럼 결과를 참고해서 감정적 몰입도가 극대화되는 대사를 만들어주세요. 시청자들이 감정적으로 깊이 빠져들 수 있도록 해주세요. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '완전 몰입': '원본 스크립트와 4번째 칼럼 결과를 참고해서 완전한 몰입이 가능한 최고의 대사를 만들어주세요. 시청자들이 화면에서 눈을 떼지 못하도록 해주세요. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '스토리텔링': '원본 스크립트와 4번째 칼럼 결과를 참고해서 스토리텔링이 강화된 대사를 만들어주세요. 이야기의 흐름과 구성이 탁월하도록 해주세요. 대사의 양은 원본 스크립트와 동일합니다.\\\\n\\\\nex)\\\\n-원본 스크립트 글자수 : **. // 숫자만 기입.\\\\n-원본 스크립트 문장수 : **.\\\\n-생성된 기본 스크립트 글자수 : **.\\\\n-생성된 기본 스크립트 문장수 : **.\\\\n\\\"대사만 쓰세요.\\\"',\n    '커스텀': ''\n  };\n\n  const handleAnalyzeContent = async (type: string) => {\n    if (!timecodeList || timecodeList.length === 0) {\n      alert('먼저 영상을 분석해주세요. (A/V 캡션, 단락, 주요 순간 등의 버튼을 눌러 생성된 내용이 필요합니다)');\n      return;\n    }\n\n    if (!apiKey.trim()) {\n      alert('Gemini API 키를 입력해주세요.');\n      return;\n    }\n\n    if (type === '커스텀' && !customAnalysisPrompt.trim()) {\n      alert('커스텀 분석을 위한 프롬프트를 입력해주세요.');\n      return;\n    }\n\n    setIsLoadingAnalysis(true);\n    setSelectedAnalysisType(type);\n    \n    const allText = timecodeList.map(item => item.text).join('\\n');\n    const languageMap = {\n      '한국어': 'Korean',\n      '일본어': 'Japanese', \n      '영어': 'English'\n    };\n    \n    const basePrompt = `다음은 YouTube 영상에서 추출한 내용입니다:\n\n${allText}\n\n요구사항:\n- ${selectedLanguage}로만 답변해주세요`;\n\n    const specificPrompt = type === '커스텀' ? customAnalysisPrompt : analysisTypes[type];\n    const analysisPrompt = `${basePrompt}\n- ${specificPrompt}`;\n\n    try {\n      const response = await generateContent(\n        analysisPrompt,\n        [],\n        `https://www.youtube.com/watch?v=${youtubeVideoId}`,\n        apiKey,\n      );\n\n      console.log('분석 응답:', response);\n      const analysisText = response.candidates?.[0]?.content?.parts?.[0]?.text || '분석 결과를 가져올 수 없습니다.';\n      setAnalysisResult(analysisText);\n      \n    } catch (error) {\n      console.error('분석 에러:', error);\n      alert('분석 중 오류가 발생했습니다.');\n    } finally {\n      setIsLoadingAnalysis(false);\n    }\n  };\n\n  const handleAnalyzeContent2 = async (type: string) => {\n    // 기존 분석 결과 또는 타임코드 결과 확인\n    const hasOriginalScript = analysisResult || (timecodeList && timecodeList.length > 0);\n    \n    if (!hasOriginalScript) {\n      alert('먼저 3번째 칼럼에서 분석을 완료하거나, 2번째 칼럼에서 Generate를 실행해주세요. (원본 스크립트가 필요합니다)');\n      return;\n    }\n\n    if (!apiKey.trim()) {\n      alert('Gemini API 키를 입력해주세요.');\n      return;\n    }\n\n    if (type === '커스텀' && !customAnalysisPrompt2.trim()) {\n      alert('커스텀 분석을 위한 프롬프트를 입력해주세요.');\n      return;\n    }\n\n    setIsLoadingScript(true);\n    setSelectedAnalysisType2(type);\n    \n    // 3번째 칼럼의 분석 결과 전체만 사용\n    const referenceContent = analysisResult;\n    \n    const basePrompt = `다음 내용을 참고하세요:\n\n${referenceContent}\n\n요구사항:\n- ${selectedLanguage2}로만 답변해주세요\n- 함수 호출이나 코드 형식이 아닌 일반 텍스트로만 답변해주세요\n- 대사만 작성해주세요`;\n\n    const specificPrompt = type === '커스텀' ? customAnalysisPrompt2 : analysisTypes2[type];\n    const analysisPrompt = `${basePrompt}\n- ${specificPrompt}`;\n\n    try {\n      const response = await generateContent(\n        analysisPrompt,\n        [],\n        `https://www.youtube.com/watch?v=${youtubeVideoId}`,\n        apiKey,\n      );\n\n      console.log('분석 응답2:', response);\n      const analysisText = response.candidates?.[0]?.content?.parts?.[0]?.text || '분석 결과를 가져올 수 없습니다.';\n      setAnalysisResult2(analysisText);\n      \n    } catch (error) {\n      console.error('분석 에러2:', error);\n      alert('분석 중 오류가 발생했습니다.');\n    } finally {\n      setIsLoadingScript(false);\n    }\n  };\n\n  // 키워드 추출 함수\n  const handleKeywordExtraction = async () => {\n    // 3번째 칼럼의 분석 결과 확인\n    if (!analysisResult && (!timecodeList || timecodeList.length === 0)) {\n      alert('먼저 3번째 칼럼에서 영상 분석을 실행해주세요.');\n      return;\n    }\n\n    if (!apiKey.trim()) {\n      alert('Gemini API 키를 입력해주세요.');\n      return;\n    }\n\n    setIsExtractingKeywords(true);\n    \n    // 3번째 칼럼의 분석 결과를 기반으로 키워드 추출\n    const analysisContent = analysisResult || (timecodeList ? timecodeList.map(item => item.text).join('\\n') : '');\n    \n    const keywordPrompt = `다음 영상 분석 결과를 바탕으로 핵심 키워드들을 중요도 순으로 추출해주세요:\n\n${analysisContent}\n\n요구사항:\n- 분석 결과에서 언급된 구체적인 용어/명칭을 우선적으로 추출하세요\n- 전문 용어, 고유명사, 특정 분야/카테고리 명칭을 놓치지 마세요\n- 예시: \"윙포일\", \"글라이딩\", \"항공역학\" 등의 구체적 용어\n- 일반적이고 모호한 단어보다는 구체적이고 특정한 용어를 우선하세요\n- 사람들이 이 주제를 검색할 때 사용할 정확한 용어들로 구성하세요\n- 가장 핵심이 되는 주제어를 맨 위에, 그 다음 관련 용어 순으로 배치하세요\n- 각 키워드를 새 줄에 하나씩 나열해주세요 (줄바꿈으로 구분)\n- 함수 호출이나 코드 형식이 아닌 일반 텍스트로만 답변해주세요\n- 한국어로 답변해주세요\n- 5-10개 정도의 키워드로 제한해주세요\n- 좋은 예: \"윙포일\", \"글라이딩\", \"항공역학\" vs 나쁜 예: \"윙\", \"비행\", \"바람\"`;\n\n    try {\n      const response = await generateContent(\n        keywordPrompt,\n        [],\n        `https://www.youtube.com/watch?v=${youtubeVideoId}`,\n        apiKey,\n      );\n\n      console.log('키워드 추출 응답:', response);\n      const keywordsText = response.candidates?.[0]?.content?.parts?.[0]?.text || '키워드를 추출할 수 없습니다.';\n      setExtractedKeywords(keywordsText);\n      \n    } catch (error) {\n      console.error('키워드 추출 에러:', error);\n      alert('키워드 추출 중 오류가 발생했습니다.');\n    } finally {\n      setIsExtractingKeywords(false);\n    }\n  };\n\n  const handleAnalyzeContent3 = async (type: string) => {\n    // 4번째 칼럼의 분석 결과 또는 3번째 칼럼 결과 확인\n    const hasAnalysisResult = analysisResult2 || analysisResult || (timecodeList && timecodeList.length > 0);\n    \n    if (!hasAnalysisResult) {\n      alert('먼저 4번째 칼럼에서 분석을 완료하거나, 3번째 칼럼에서 분석을 실행해주세요.');\n      return;\n    }\n\n    if (!apiKey.trim()) {\n      alert('Gemini API 키를 입력해주세요.');\n      return;\n    }\n\n    if (type === '커스텀' && !customAnalysisPrompt3.trim()) {\n      alert('커스텀 분석을 위한 프롬프트를 입력해주세요.');\n      return;\n    }\n\n    setIsLoading(true);  // 이 함수는 음성 관련이므로 일단 기존 상태 유지\n    setSelectedAnalysisType3(type);\n    \n    // 4번째 칼럼 결과가 있으면 그것과 원본 타임코드를 모두 사용\n    const referenceContent = analysisResult2 ? \n      `4번째 칼럼 분석 결과:\n${analysisResult2}\n\n원본 타임코드:\n${timecodeList.map(item => `${item.time}: ${item.text}`).join('\\n')}` :\n      `원본 타임코드:\n${timecodeList.map(item => `${item.time}: ${item.text}`).join('\\n')}`;\n    \n    const basePrompt = `다음 내용을 참고하세요:\n\n${referenceContent}\n\n요구사항:\n- ${selectedLanguage3}로만 답변해주세요\n- 함수 호출이나 코드 형식이 아닌 일반 텍스트로만 답변해주세요\n- 대사만 작성해주세요`;\n\n    const specificPrompt = type === '커스텀' ? customAnalysisPrompt3 : analysisTypes3[type];\n    const analysisPrompt = `${basePrompt}\n- ${specificPrompt}`;\n\n    try {\n      const response = await generateContent(\n        analysisPrompt,\n        [],\n        `https://www.youtube.com/watch?v=${youtubeVideoId}`,\n        apiKey,\n      );\n\n      console.log('분석 응답3:', response);\n      const analysisText = response.candidates?.[0]?.content?.parts?.[0]?.text || '분석 결과를 가져올 수 없습니다.';\n      setAnalysisResult3(analysisText);\n      \n    } catch (error) {\n      console.error('분석 에러3:', error);\n      alert('분석 중 오류가 발생했습니다.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <main className={c(theme)}>\n      <div className=\"url-input-section\">\n        <form onSubmit={handleLoadVideo} className=\"url-input-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter YouTube URL...\"\n            value={youtubeUrlInput}\n            onChange={(e) => setYoutubeUrlInput(e.target.value)}\n            className=\"url-input\"\n            required\n          />\n          <button type=\"submit\" className=\"load-button\">\n            Load Video\n          </button>\n        </form>\n      </div>\n\n\n      <div className=\"four-column-layout\">\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#666', marginBottom: '8px', textAlign: 'left' }}>1</div>\n          <div className=\"video-column\" ref={videoColumnRef}>\n            <VideoPlayer\n              videoId={youtubeVideoId}\n              requestedTimecode={requestedTimecode}\n              timecodeList={timecodeList}\n              jumpToTimecode={setRequestedTimecode}\n              onLoadVideo={handleLoadVideo}\n              youtubeUrlInput={youtubeUrlInput}\n              setYoutubeUrlInput={setYoutubeUrlInput}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#666', marginBottom: '8px', textAlign: 'left' }}>2</div>\n          <aside className=\"button-column\" ref={buttonColumnRef}>\n            <div className=\"modeSelector\">\n            <div>\n              <h2 style={{ fontWeight: 'bold', color: '#333', fontSize: '16px' }}>비디오 분석하기:</h2>\n              <div className=\"modeList\">\n                {Object.entries(modes).map(([mode, {emoji, prompt}]) => (\n                  <div key={mode}>\n                    <button\n                      className={c('button', {\n                        active: mode === selectedMode,\n                      })}\n                      onClick={() => {\n                        if (selectedMode === mode && expandedModes[mode]) {\n                          // 이미 선택된 버튼을 다시 누르면 아코디언 닫기\n                          setExpandedModes(prev => ({\n                            ...prev,\n                            [mode]: false\n                          }));\n                        } else {\n                          // 새로운 버튼을 누르면 선택 + 아코디언 열기\n                          setSelectedMode(mode);\n                          setExpandedModes(prev => ({\n                            ...prev,\n                            [mode]: true\n                          }));\n                          // 2번째 칼럼을 중앙으로 스크롤\n                          setTimeout(() => scrollToColumn(buttonColumnRef), 100);\n                        }\n                      }}\n                      style={{width: '100%', display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                      <span>\n                        <span className=\"emoji\">{emoji}</span> {mode}\n                      </span>\n                      <span \n                        style={{cursor: 'pointer', fontSize: '12px', transform: expandedModes[mode] ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.2s'}}>\n                        ▼\n                      </span>\n                    </button>\n                    {expandedModes[mode] && (\n                      <div style={{\n                        background: 'var(--background)',\n                        border: '1px solid var(--border)',\n                        borderTop: 'none',\n                        borderRadius: '0 0 4px 4px',\n                        padding: '15px',\n                        fontSize: '13px',\n                        color: 'var(--text)',\n                        lineHeight: '1.4'\n                      }}>\n                        {mode === '커스텀' ? (\n                          <div>\n                            <textarea\n                              placeholder=\"커스텀 분석을 위한 프롬포트를 입력하세요...\"\n                              value={customPrompt}\n                              onChange={(e) => setCustomPrompt(e.target.value)}\n                              rows={4}\n                              style={{\n                                width: '100%',\n                                padding: '8px',\n                                border: '1px solid var(--border)',\n                                borderRadius: '4px',\n                                background: 'var(--highlight)',\n                                color: 'var(--text)',\n                                fontSize: '13px',\n                                fontFamily: 'inherit',\n                                resize: 'vertical'\n                              }}\n                            />\n                          </div>\n                        ) : (\n                          <div>\n                            <strong>Current Prompt:</strong><br/>\n                            {typeof prompt === 'function' ? 'Custom prompt with user input' : prompt}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div>\n              <div style={{marginBottom: '10px'}}>\n                <label htmlFor=\"apiKey2\" style={{display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#333', fontSize: '16px'}}>\n                  Gemini API Key:\n                </label>\n                <input\n                  id=\"apiKey2\"\n                  type=\"password\"\n                  placeholder=\"Enter your Gemini API key...\"\n                  value={apiKey}\n                  onChange={(e) => setApiKey(e.target.value)}\n                  style={{width: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px'}}\n                />\n              </div>\n              <button\n                className=\"button generateButton\"\n                onClick={() => onModeSelect(selectedMode)}\n                disabled={!apiKey.trim() || (isCustomMode && !customPrompt.trim())}>\n                ▶️ Generate\n              </button>\n              \n              {isLoadingGenerate && <LoadingMessage />}\n            </div>\n          </div>\n          <div className={c('tools', {inactive: !youtubeVideoId})}>\n              <section\n                className={c('output', {['mode' + activeMode]: activeMode})}\n                ref={scrollRef}>\n                {timecodeList && activeMode ? (\n                  activeMode === 'Table' ? (\n                    <table>\n                      <thead>\n                        <tr>\n                          <th>Time</th>\n                          <th>Description</th>\n                          <th>Objects</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {timecodeList.map(({time, text, objects}, i) => (\n                          <tr\n                            key={i}\n                            role=\"button\"\n                            onClick={() =>\n                              setRequestedTimecode(timeToSecs(time))\n                            }>\n                            <td>\n                              <time>{time}</time>\n                            </td>\n                            <td>{text}</td>\n                            <td>{objects.join(', ')}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  ) : (modes as any)[activeMode].isList ? (\n                    <ul>\n                      {timecodeList.map(({time, text}, i) => (\n                        <li key={i} className=\"outputItem\">\n                          <button\n                            onClick={() =>\n                              setRequestedTimecode(timeToSecs(time))\n                            }>\n                            <time>{time}</time>\n                            <p className=\"text\">{text}</p>\n                          </button>\n                        </li>\n                      ))}\n                    </ul>\n                  ) : (\n                    timecodeList.map(({time, text}, i) => (\n                      <>\n                        <span\n                          key={i}\n                          className=\"sentence\"\n                          role=\"button\"\n                          onClick={() =>\n                            setRequestedTimecode(timeToSecs(time))\n                          }>\n                          <time>{time}</time>\n                          <span>{text}</span>\n                        </span>{' '}\n                      </>\n                    ))\n                  )\n                ) : null}\n              </section>\n            </div>\n          </aside>\n        </div>\n\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#666', marginBottom: '8px', textAlign: 'left' }}>3</div>\n          <div className=\"white-column\" ref={whiteColumnRef}>\n            <div className=\"modeList\">\n              <div style={{ marginBottom: '15px', display: 'flex', alignItems: 'center', gap: '10px' }}>\n                <label style={{ fontWeight: 'bold', color: '#333', whiteSpace: 'nowrap', fontSize: '16px' }}>분석 언어:</label>\n                <select\n                  value={selectedLanguage}\n                  onChange={(e) => setSelectedLanguage(e.target.value)}\n                  style={{\n                    padding: '8px 12px',\n                    border: '1px solid #ccc',\n                    borderRadius: '4px',\n                    fontSize: '14px',\n                    backgroundColor: 'white',\n                    color: '#333',\n                    flex: 1\n                  }}\n                >\n                  <option value=\"한국어\">한국어</option>\n                  <option value=\"일본어\">일본어</option>\n                  <option value=\"영어\">영어</option>\n                </select>\n              </div>\n\n              {Object.entries(analysisTypes).map(([type, prompt]) => (\n                <div key={type}>\n                  <button\n                    className={c('button', {\n                      active: expandedAnalysis === type,\n                    })}\n                    onClick={() => {\n                      if (expandedAnalysis === type) {\n                        // 이미 선택된 버튼을 다시 누르면 아코디언 닫기\n                        setExpandedAnalysis('');\n                      } else {\n                        // 새로운 버튼을 누르면 선택 + 아코디언 열기\n                        setExpandedAnalysis(type);\n                        // 3번째 칼럼을 중앙으로 스크롤\n                        setTimeout(() => scrollToColumn(whiteColumnRef), 100);\n                      }\n                    }}\n                    style={{width: '100%', display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}\n                  >\n                    <span>\n                      <span className=\"emoji\">{type === '커스텀' ? '🔧' : type === '역사적 관점' ? '🏛️' : type === '과학적 관점' ? '🧪' : type === '바이럴 쇼츠용' ? '🔥' : '📝'}</span> {type}\n                    </span>\n                    <span \n                      style={{cursor: 'pointer', fontSize: '12px', transform: expandedAnalysis === type ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.2s'}}\n                    >\n                      ▼\n                    </span>\n                  </button>\n                  {expandedAnalysis === type && (\n                    <div style={{\n                      background: 'var(--background)',\n                      border: '1px solid var(--border)',\n                      borderTop: 'none',\n                      borderRadius: '0 0 4px 4px',\n                      padding: '15px',\n                      fontSize: '13px',\n                      color: 'var(--text)',\n                      lineHeight: '1.4'\n                    }}>\n                      {type === '커스텀' ? (\n                        <div>\n                          <textarea\n                            placeholder=\"커스텀 분석을 위한 프롬프트를 입력하세요...\"\n                            value={customAnalysisPrompt}\n                            onChange={(e) => setCustomAnalysisPrompt(e.target.value)}\n                            rows={4}\n                            style={{\n                              width: '100%',\n                              padding: '8px',\n                              border: '1px solid var(--border)',\n                              borderRadius: '4px',\n                              background: 'var(--highlight)',\n                              color: 'var(--text)',\n                              fontSize: '13px',\n                              fontFamily: 'inherit',\n                              resize: 'vertical'\n                            }}\n                          />\n                        </div>\n                      ) : (\n                        <div>\n                          <strong>프롬프트:</strong><br/>\n                          <div style={{ whiteSpace: 'pre-wrap' }}>\n                            {prompt.replace(/\\\\n/g, '\\n')}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            <div style={{ marginTop: '20px' }}>\n              <button\n                className=\"button generateButton\"\n                onClick={() => {\n                  if (expandedAnalysis) {\n                    handleAnalyzeContent(expandedAnalysis);\n                  } else {\n                    alert('분석 타입을 선택해주세요.');\n                  }\n                }}\n                disabled={\n                  !apiKey.trim() || \n                  !expandedAnalysis ||\n                  (expandedAnalysis === '커스텀' && !customAnalysisPrompt.trim())\n                }>\n                🔬 분석하기\n              </button>\n              \n              {isLoadingAnalysis && <LoadingMessage />}\n            </div>\n          </div>\n          \n          {analysisResult && (\n            <div style={{\n              marginTop: '20px',\n              padding: '15px',\n              background: '#f8f9fa',\n              border: '1px solid #dee2e6',\n              borderRadius: '6px',\n              color: '#333'\n            }}>\n              <h4 style={{ marginBottom: '10px', color: '#333' }}>\n                분석 결과 ({selectedAnalysisType}):\n              </h4>\n              <div style={{ \n                whiteSpace: 'pre-wrap', \n                lineHeight: '1.6',\n                fontSize: '14px',\n                color: '#333'\n              }}>\n                {analysisResult.replace(/\\\\n/g, '\\n')}\n              </div>\n            </div>\n          )}\n          </div>\n        </div>\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#666', marginBottom: '8px', textAlign: 'left' }}>4</div>\n          <div className=\"fourth-column\" ref={fourthColumnRef}>\n            <div className=\"modeList\">\n              <div style={{ marginBottom: '15px', display: 'flex', alignItems: 'center', gap: '10px' }}>\n                <label style={{ fontWeight: 'bold', color: '#333', whiteSpace: 'nowrap' }}>대사 언어:</label>\n                <select\n                  value={selectedLanguage2}\n                  onChange={(e) => setSelectedLanguage2(e.target.value)}\n                  style={{\n                    padding: '8px 12px',\n                    border: '1px solid #ccc',\n                    borderRadius: '4px',\n                    fontSize: '14px',\n                    backgroundColor: 'white',\n                    color: '#333',\n                    flex: 1\n                  }}\n                >\n                  <option value=\"한국어\">한국어</option>\n                  <option value=\"일본어\">일본어</option>\n                  <option value=\"영어\">영어</option>\n                </select>\n              </div>\n\n              {Object.entries(analysisTypes2).map(([type, prompt]) => (\n                <div key={type}>\n                  <button\n                    className={c('button', {\n                      active: expandedAnalysis2 === type,\n                    })}\n                    onClick={() => {\n                      if (expandedAnalysis2 === type) {\n                        // 이미 선택된 버튼을 다시 누르면 아코디언 닫기\n                        setExpandedAnalysis2('');\n                      } else {\n                        // 새로운 버튼을 누르면 선택 + 아코디언 열기\n                        setExpandedAnalysis2(type);\n                        // 4번째 칼럼을 중앙으로 스크롤\n                        setTimeout(() => scrollToColumn(fourthColumnRef), 100);\n                      }\n                    }}\n                    style={{width: '100%', display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}\n                  >\n                    <span>\n                      <span className=\"emoji\">{type === '커스텀' ? '🔧' : type === '3초 후킹' ? '⚡' : type === '정보력 만렙' ? '🧠' : type === '바이럴 대사' ? '💬' : '📝'}</span> {type}\n                    </span>\n                    <span \n                      style={{cursor: 'pointer', fontSize: '12px', transform: expandedAnalysis2 === type ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.2s'}}\n                    >\n                      ▼\n                    </span>\n                  </button>\n                  {expandedAnalysis2 === type && (\n                    <div style={{\n                      background: 'var(--background)',\n                      border: '1px solid var(--border)',\n                      borderTop: 'none',\n                      borderRadius: '0 0 4px 4px',\n                      padding: '15px',\n                      fontSize: '13px',\n                      color: 'var(--text)',\n                      lineHeight: '1.4'\n                    }}>\n                      {type === '커스텀' ? (\n                        <div>\n                          <textarea\n                            placeholder=\"커스텀 분석을 위한 프롬프트를 입력하세요...\"\n                            value={customAnalysisPrompt2}\n                            onChange={(e) => setCustomAnalysisPrompt2(e.target.value)}\n                            rows={4}\n                            style={{\n                              width: '100%',\n                              padding: '8px',\n                              border: '1px solid var(--border)',\n                              borderRadius: '4px',\n                              background: 'var(--highlight)',\n                              color: 'var(--text)',\n                              fontSize: '13px',\n                              fontFamily: 'inherit',\n                              resize: 'vertical'\n                            }}\n                          />\n                        </div>\n                      ) : (\n                        <div>\n                          <strong>프롬프트:</strong><br/>\n                          <div style={{ whiteSpace: 'pre-wrap' }}>\n                            {prompt.replace(/\\\\n/g, '\\n')}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            <div style={{ marginTop: '20px' }}>\n              <button\n                className=\"button generateButton\"\n                onClick={() => {\n                  if (expandedAnalysis2) {\n                    handleAnalyzeContent2(expandedAnalysis2);\n                  } else {\n                    alert('분석 타입을 선택해주세요.');\n                  }\n                }}\n                disabled={\n                  !apiKey.trim() || \n                  !expandedAnalysis2 ||\n                  (expandedAnalysis2 === '커스텀' && !customAnalysisPrompt2.trim())\n                }>\n                🎬 대사 만들기\n              </button>\n              \n              {isLoadingScript && <LoadingMessage />}\n            </div>\n          </div>\n          \n          {analysisResult2 && (\n            <>\n              <div style={{\n                marginTop: '20px',\n                padding: '15px',\n                background: '#f8f9fa',\n                border: '1px solid #dee2e6',\n                borderRadius: '6px',\n                color: '#333'\n              }}>\n                <h4 style={{ marginBottom: '10px', color: '#333' }}>\n                  분석 결과 ({selectedAnalysisType2}):\n                </h4>\n                <div style={{ \n                  whiteSpace: 'pre-wrap', \n                  lineHeight: '1.6',\n                  fontSize: '14px',\n                  color: '#333'\n                }}>\n                  {analysisResult2.replace(/\\\\n/g, '\\n')}\n                </div>\n              </div>\n              \n              <div style={{\n                marginTop: '15px',\n                padding: '12px',\n                background: '#e8f4f8',\n                border: '1px solid #bee5eb',\n                borderRadius: '6px',\n                color: '#0c5460',\n                fontSize: '13px'\n              }}>\n                <div style={{ marginBottom: '15px' }}>\n                  이 대사를 내 스타일로 바꾸고싶다면, 잘된 예시 3개를 올려주세요\n                </div>\n                \n                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n                  {['example1', 'example2', 'example3'].map((fileKey, index) => (\n                    <div key={fileKey} style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n                      {!uploadedFiles[fileKey] ? (\n                        <label style={{\n                          padding: '8px 12px',\n                          background: 'white',\n                          border: '1px solid #bee5eb',\n                          borderRadius: '4px',\n                          color: '#0c5460',\n                          fontSize: '12px',\n                          cursor: 'pointer',\n                          transition: 'background-color 0.2s',\n                          display: 'inline-block',\n                          textAlign: 'center'\n                        }}\n                        onMouseOver={(e) => e.target.style.backgroundColor = '#f0f9ff'}\n                        onMouseOut={(e) => e.target.style.backgroundColor = 'white'}>\n                          📁 잘된 예시{index + 1}.txt 업로드\n                          <input\n                            type=\"file\"\n                            accept=\".txt\"\n                            style={{ display: 'none' }}\n                            onChange={(e) => {\n                              const file = e.target.files?.[0];\n                              if (file) {\n                                handleFileUpload(fileKey, file);\n                              }\n                            }}\n                          />\n                        </label>\n                      ) : (\n                        <div style={{ \n                          display: 'flex', \n                          alignItems: 'center', \n                          justifyContent: 'space-between',\n                          padding: '8px 12px',\n                          background: '#f0f9ff',\n                          border: '1px solid #bee5eb',\n                          borderRadius: '4px'\n                        }}>\n                          <span style={{ \n                            color: '#0c5460', \n                            fontSize: '12px',\n                            flex: 1,\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                            whiteSpace: 'nowrap'\n                          }}>\n                            📄 {uploadedFiles[fileKey].name}\n                          </span>\n                          <button\n                            onClick={() => handleFileDelete(fileKey)}\n                            style={{\n                              background: 'transparent',\n                              border: 'none',\n                              color: '#dc3545',\n                              fontSize: '12px',\n                              cursor: 'pointer',\n                              marginLeft: '8px',\n                              padding: '2px 6px',\n                              borderRadius: '3px'\n                            }}\n                            onMouseOver={(e) => e.target.style.backgroundColor = '#ffebee'}\n                            onMouseOut={(e) => e.target.style.backgroundColor = 'transparent'}\n                          >\n                            삭제\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n                \n                <button\n                  onClick={handleRewriteWithExamples}\n                  style={{\n                    marginTop: '12px',\n                    padding: '10px 16px',\n                    background: '#17a2b8',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '6px',\n                    fontSize: '13px',\n                    cursor: 'pointer',\n                    width: '100%',\n                    transition: 'background-color 0.2s'\n                  }}\n                  onMouseOver={(e) => e.target.style.backgroundColor = '#138496'}\n                  onMouseOut={(e) => e.target.style.backgroundColor = '#17a2b8'}\n                  disabled={Object.values(uploadedFiles).every(file => file === null)}\n                >\n                  📝 이 예시를 기준으로 재작성하기\n                </button>\n                \n                {isLoadingRewrite && (\n                  <div style={{ marginTop: '10px', textAlign: 'center' }}>\n                    <LoadingMessage />\n                  </div>\n                )}\n                \n                {rewrittenResult && (\n                  <div style={{\n                    marginTop: '15px',\n                    padding: '15px',\n                    background: '#f0fff4',\n                    border: '1px solid #90ee90',\n                    borderRadius: '6px',\n                    color: '#333'\n                  }}>\n                    <h4 style={{ marginBottom: '10px', color: '#2d5016' }}>\n                      재작성된 대사:\n                    </h4>\n                    <div style={{ \n                      whiteSpace: 'pre-wrap', \n                      lineHeight: '1.6',\n                      fontSize: '14px',\n                      color: '#333'\n                    }}>\n                      {rewrittenResult.replace(/\\\\n/g, '\\n')}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#666', marginBottom: '8px', textAlign: 'left' }}>5</div>\n          <div className=\"fifth-column\" ref={fifthColumnRef}>\n            <div style={{ marginBottom: '15px' }}>\n              <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>\n                <label style={{ fontWeight: 'bold', color: '#333', whiteSpace: 'nowrap', fontSize: '16px' }}>음성 선택:</label>\n                <div style={{ position: 'relative', flex: 1 }}>\n                  <button\n                    onClick={() => {\n                      setShowVoiceDropdown(!showVoiceDropdown);\n                      setTimeout(() => scrollToColumn(fifthColumnRef), 100);\n                    }}\n                    style={{\n                      width: '100%',\n                      padding: '8px 12px',\n                      border: '1px solid #ccc',\n                      borderRadius: '4px',\n                      fontSize: '14px',\n                      backgroundColor: 'white',\n                      color: '#333',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      textAlign: 'left'\n                    }}\n                  >\n                    <span>{selectedVoice}</span>\n                    <span style={{ transform: showVoiceDropdown ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.2s' }}>▼</span>\n                  </button>\n                  \n                  {showVoiceDropdown && (\n                    <div style={{\n                      position: 'absolute',\n                      top: '100%',\n                      left: 0,\n                      width: '360px',\n                      backgroundColor: 'white',\n                      border: '1px solid #ccc',\n                      borderTop: 'none',\n                      borderRadius: '0 0 4px 4px',\n                      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                      zIndex: 1000,\n                      padding: '15px'\n                    }}>\n                      <div style={{\n                        display: 'grid',\n                        gridTemplateColumns: 'repeat(3, 1fr)',\n                        gap: '12px'\n                      }}>\n                        {voiceOptions.map((voice, index) => (\n                          <div\n                            key={voice}\n                            onClick={() => {\n                              setSelectedVoice(voice);\n                              setShowVoiceDropdown(false);\n                            }}\n                            style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                              alignItems: 'center',\n                              padding: '12px',\n                              border: selectedVoice === voice ? '2px solid #2872E3' : '1px solid #ddd',\n                              borderRadius: '6px',\n                              backgroundColor: selectedVoice === voice ? '#f0f7ff' : 'white',\n                              cursor: 'pointer',\n                              width: '100px',\n                              height: '100px',\n                              justifyContent: 'center',\n                              gap: '8px'\n                            }}\n                            onMouseEnter={(e) => {\n                              if (selectedVoice !== voice) {\n                                e.currentTarget.style.backgroundColor = '#f8f9fa';\n                              }\n                            }}\n                            onMouseLeave={(e) => {\n                              if (selectedVoice !== voice) {\n                                e.currentTarget.style.backgroundColor = 'white';\n                              }\n                            }}\n                          >\n                            <span\n                              style={{ \n                                fontWeight: selectedVoice === voice ? 'bold' : 'normal',\n                                fontSize: '15px',\n                                textAlign: 'center',\n                                marginBottom: '4px',\n                                pointerEvents: 'none'\n                              }}\n                            >\n                              {voice}\n                            </span>\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                \n                                if (isPreviewPlaying === voice) {\n                                  // 현재 재생 중인 음성이면 일시정지\n                                  if (previewAudio) {\n                                    previewAudio.pause();\n                                    setIsPreviewPlaying(null);\n                                  }\n                                } else {\n                                  // 다른 음성 재생 중이면 먼저 정지\n                                  if (previewAudio) {\n                                    previewAudio.pause();\n                                  }\n                                  \n                                  // 새로운 음성 재생\n                                  try {\n                                    const audio = new Audio(`voices/${voice}.wav`);\n                                    audio.onended = () => {\n                                      setIsPreviewPlaying(null);\n                                      setPreviewAudio(null);\n                                    };\n                                    audio.onerror = () => {\n                                      console.error('미리듣기 재생 오류');\n                                      setIsPreviewPlaying(null);\n                                      setPreviewAudio(null);\n                                    };\n                                    \n                                    setPreviewAudio(audio);\n                                    setIsPreviewPlaying(voice);\n                                    audio.play();\n                                  } catch (error) {\n                                    console.error('미리듣기 재생 오류:', error);\n                                    alert(`${voice} 음성을 재생할 수 없습니다.`);\n                                  }\n                                }\n                              }}\n                              style={{\n                                padding: '0',\n                                backgroundColor: 'transparent',\n                                color: 'black',\n                                border: '1px solid #ccc',\n                                borderRadius: '50%',\n                                fontSize: '12px',\n                                cursor: 'pointer',\n                                width: '28px',\n                                height: '28px',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                transition: 'all 0.2s ease'\n                              }}\n                            >\n                              {isPreviewPlaying === voice ? (\n                                <div style={{\n                                  display: 'flex',\n                                  gap: '2px'\n                                }}>\n                                  <div style={{\n                                    width: '3px',\n                                    height: '8px',\n                                    backgroundColor: 'black'\n                                  }}></div>\n                                  <div style={{\n                                    width: '3px',\n                                    height: '8px',\n                                    backgroundColor: 'black'\n                                  }}></div>\n                                </div>\n                              ) : (\n                                <div style={{\n                                  width: '0',\n                                  height: '0',\n                                  borderLeft: '6px solid black',\n                                  borderTop: '4px solid transparent',\n                                  borderBottom: '4px solid transparent',\n                                  marginLeft: '1px'\n                                }}></div>\n                              )}\n                            </button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <textarea\n              placeholder=\"대사를 넣어주세요.\"\n              value={scriptText}\n              onChange={(e) => setScriptText(e.target.value)}\n              onFocus={() => {\n                setTimeout(() => scrollToColumn(fifthColumnRef), 100);\n              }}\n              style={{\n                width: '100%',\n                height: '430px',\n                marginTop: '0',\n                padding: '15px',\n                border: '1px solid #ccc',\n                borderRadius: '6px',\n                fontSize: '14px',\n                fontFamily: 'inherit',\n                resize: 'vertical',\n                backgroundColor: 'white',\n                color: '#333'\n              }}\n            />\n            \n            <div style={{ marginTop: '10px' }}>\n              <button\n                className=\"button generateButton\"\n                onClick={async () => {\n                  if (!scriptText.trim()) {\n                    alert('대사를 먼저 입력해주세요.');\n                    return;\n                  }\n                  \n                  setIsGeneratingVoice(true);\n                  setGeneratedAudio(null);\n                  \n                  try {\n                    console.log(`${selectedVoice} 음성으로 TTS 생성 시작...`);\n                    \n                    // TTS 모듈을 사용하여 음성 생성 (재생하지 않음)\n                    const result = await generateVoice({\n                      text: scriptText,\n                      userVoice: selectedVoice,\n                      apiKey: apiKey\n                    });\n                    \n                    if (result.success && result.audioBuffer) {\n                      setGeneratedAudio(result.audioBuffer);\n                    } else {\n                      alert(`음성 생성 실패: ${result.error || '알 수 없는 오류'}`);\n                    }\n                  } catch (error) {\n                    console.error('TTS 오류:', error);\n                    alert('TTS 생성 중 오류가 발생했습니다.');\n                  } finally {\n                    setIsGeneratingVoice(false);\n                  }\n                }}\n                disabled={!apiKey.trim() || !scriptText.trim() || isGeneratingVoice}>\n                🎵 음성 생성하기\n              </button>\n              \n              {/* 음성 생성 로딩 메시지 */}\n              {isGeneratingVoice && <LoadingMessage type=\"voice\" />}\n              \n              {/* 음악 플레이어 UI */}\n              {generatedAudio && (\n                <div style={{\n                  marginTop: '15px',\n                  padding: '12px',\n                  background: '#f8f9fa',\n                  border: '1px solid #dee2e6',\n                  borderRadius: '8px',\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: '12px'\n                }}>\n                  {/* 플레이/일시정지 버튼 */}\n                  <button\n                    onClick={async () => {\n                      if (isPlaying && currentAudio) {\n                        // 일시정지\n                        currentAudio.pause();\n                        setIsPlaying(false);\n                      } else {\n                        // 재생\n                        try {\n                          // 기존 오디오 정리\n                          if (currentAudio) {\n                            currentAudio.pause();\n                            currentAudio.currentTime = 0;\n                          }\n\n                          const audioBlob = new Blob([generatedAudio], { type: 'audio/wav' });\n                          const audioUrl = URL.createObjectURL(audioBlob);\n                          const audio = new Audio(audioUrl);\n                          \n                          audio.onloadedmetadata = () => {\n                            setDuration(audio.duration);\n                          };\n                          \n                          audio.ontimeupdate = () => {\n                            setCurrentTime(audio.currentTime);\n                          };\n                          \n                          audio.onended = () => {\n                            setIsPlaying(false);\n                            setCurrentTime(0);\n                            URL.revokeObjectURL(audioUrl);\n                            setCurrentAudio(null);\n                          };\n                          \n                          audio.onerror = () => {\n                            setIsPlaying(false);\n                            setCurrentTime(0);\n                            URL.revokeObjectURL(audioUrl);\n                            setCurrentAudio(null);\n                            alert('오디오 재생 중 오류가 발생했습니다.');\n                          };\n                          \n                          setCurrentAudio(audio);\n                          await audio.play();\n                          setIsPlaying(true);\n                        } catch (error) {\n                          console.error('재생 오류:', error);\n                          alert('오디오 재생 중 오류가 발생했습니다.');\n                          setIsPlaying(false);\n                        }\n                      }\n                    }}\n                    style={{\n                      width: '40px',\n                      height: '40px',\n                      borderRadius: '50%',\n                      backgroundColor: 'transparent',\n                      color: 'black',\n                      border: '2px solid #ccc',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      fontSize: '14px',\n                      transition: 'all 0.2s ease'\n                    }}\n                    onMouseOver={(e) => {\n                      e.target.style.backgroundColor = '#f0f0f0';\n                      e.target.style.borderColor = '#999';\n                    }}\n                    onMouseOut={(e) => {\n                      e.target.style.backgroundColor = 'transparent';\n                      e.target.style.borderColor = '#ccc';\n                    }}\n                  >\n                    {isPlaying ? (\n                      <div style={{\n                        width: '12px',\n                        height: '12px',\n                        display: 'flex',\n                        gap: '2px'\n                      }}>\n                        <div style={{\n                          width: '4px',\n                          height: '12px',\n                          backgroundColor: 'black'\n                        }}></div>\n                        <div style={{\n                          width: '4px',\n                          height: '12px',\n                          backgroundColor: 'black'\n                        }}></div>\n                      </div>\n                    ) : (\n                      <div style={{\n                        width: '0',\n                        height: '0',\n                        borderLeft: '10px solid black',\n                        borderTop: '6px solid transparent',\n                        borderBottom: '6px solid transparent',\n                        marginLeft: '2px'\n                      }}></div>\n                    )}\n                  </button>\n                  \n                  {/* 오디오 정보와 프로그레스바 */}\n                  <div style={{ flex: 1 }}>\n                    <div style={{ \n                      fontSize: '14px', \n                      fontWeight: '500',\n                      color: '#333',\n                      marginBottom: '8px'\n                    }}>\n                      생성된 음성 ({selectedVoice})\n                    </div>\n                    \n                    {/* 프로그레스바 */}\n                    <div style={{ marginBottom: '6px' }}>\n                      <div style={{\n                        width: '100%',\n                        height: '4px',\n                        backgroundColor: '#e0e0e0',\n                        borderRadius: '2px',\n                        overflow: 'hidden',\n                        cursor: 'pointer'\n                      }}\n                      onClick={(e) => {\n                        if (currentAudio && duration > 0) {\n                          const rect = e.currentTarget.getBoundingClientRect();\n                          const clickX = e.clientX - rect.left;\n                          const percentage = clickX / rect.width;\n                          const newTime = percentage * duration;\n                          currentAudio.currentTime = newTime;\n                          setCurrentTime(newTime);\n                        }\n                      }}>\n                        <div style={{\n                          width: `${duration > 0 ? (currentTime / duration) * 100 : 0}%`,\n                          height: '100%',\n                          backgroundColor: '#007bff',\n                          transition: 'width 0.1s ease'\n                        }} />\n                      </div>\n                    </div>\n                    \n                    {/* 시간 표시 */}\n                    <div style={{ \n                      fontSize: '12px', \n                      color: '#666',\n                      display: 'flex',\n                      justifyContent: 'space-between'\n                    }}>\n                      <span>{formatTime(currentTime)}</span>\n                      <span>{formatTime(duration)}</span>\n                    </div>\n                  </div>\n                  \n                  {/* 다운로드 버튼 */}\n                  <button\n                    onClick={() => {\n                      const audioBlob = new Blob([generatedAudio], { type: 'audio/wav' });\n                      const url = URL.createObjectURL(audioBlob);\n                      \n                      const link = document.createElement('a');\n                      link.href = url;\n                      link.download = `generated-voice-${selectedVoice}.wav`;\n                      document.body.appendChild(link);\n                      link.click();\n                      document.body.removeChild(link);\n                      \n                      URL.revokeObjectURL(url);\n                    }}\n                    style={{\n                      padding: '8px 12px',\n                      backgroundColor: '#28a745',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '4px',\n                      fontSize: '12px',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '4px'\n                    }}\n                  >\n                    ⬇️ 다운로드\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#666', marginBottom: '8px', textAlign: 'left' }}>6</div>\n          <div className=\"sixth-column\" ref={sixthColumnRef}>\n            <div style={{ marginBottom: '15px' }}>\n              <h3 style={{ fontWeight: 'bold', color: '#333', fontSize: '16px', margin: 0 }}>관련 영상 더 찾기</h3>\n            </div>\n            \n            <div style={{ marginBottom: '15px' }}>\n              <button\n                className=\"button generateButton\"\n                onClick={handleKeywordExtraction}\n                disabled={!apiKey.trim() || !youtubeVideoId || isExtractingKeywords}\n                style={{ width: '100%', marginBottom: '15px' }}\n              >\n                {isExtractingKeywords ? '🔄 키워드 추출 중...' : '🔍 영상의 키워드 추출'}\n              </button>\n              \n              <div style={{\n                marginTop: '10px',\n                marginBottom: '15px',\n                minHeight: '120px',\n                padding: '15px',\n                background: extractedKeywords ? '#f8f9fa' : '#fafafa',\n                border: '1px solid #dee2e6',\n                borderRadius: '6px',\n                color: '#333'\n              }}>\n                <h4 style={{ \n                  marginBottom: '10px', \n                  color: '#333', \n                  fontSize: '14px',\n                  fontWeight: 'bold'\n                }}>\n                  추출된 키워드:\n                </h4>\n                <div style={{ \n                  minHeight: '80px'\n                }}>\n                  {extractedKeywords ? (\n                    extractedKeywords.split('\\n').filter(keyword => keyword.trim()).map((keyword, index) => (\n                      <div key={index} style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginBottom: '8px',\n                        padding: '6px 0',\n                        fontSize: '13px',\n                        color: '#333'\n                      }}>\n                        <span style={{ flex: 1 }}>\n                          {keyword.trim()}\n                        </span>\n                        <button\n                          onClick={() => {\n                            navigator.clipboard.writeText(keyword.trim());\n                            // 복사 완료 알림을 위한 간단한 피드백\n                            const btn = document.activeElement as HTMLButtonElement;\n                            const originalText = btn.innerHTML;\n                            btn.innerHTML = '✅';\n                            setTimeout(() => {\n                              btn.innerHTML = originalText;\n                            }, 1000);\n                          }}\n                          style={{\n                            marginLeft: '8px',\n                            padding: '4px 6px',\n                            backgroundColor: 'transparent',\n                            border: '1px solid #ccc',\n                            borderRadius: '3px',\n                            cursor: 'pointer',\n                            fontSize: '12px',\n                            color: '#666'\n                          }}\n                          onMouseEnter={(e) => {\n                            e.currentTarget.style.backgroundColor = '#f0f0f0';\n                          }}\n                          onMouseLeave={(e) => {\n                            e.currentTarget.style.backgroundColor = 'transparent';\n                          }}\n                          title=\"키워드 복사\"\n                        >\n                          📋\n                        </button>\n                      </div>\n                    ))\n                  ) : (\n                    <div style={{ \n                      color: '#999',\n                      fontSize: '13px',\n                      lineHeight: '1.8'\n                    }}>\n                      키워드 추출 버튼을 눌러서 영상의 키워드를 추출해보세요.\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <button\n              className=\"button generateButton\"\n              onClick={() => {\n                alert('관련 영상 검색 (준비 중)');\n                setTimeout(() => scrollToColumn(sixthColumnRef), 100);\n              }}>\n              🔍 홈으로 가서 관련 영상 더 찾기\n            </button>\n            \n            <div style={{\n              marginTop: '10px',\n              padding: '10px',\n              backgroundColor: '#fff3cd',\n              border: '1px solid #ffeaa7',\n              borderRadius: '4px',\n              fontSize: '12px',\n              color: '#856404',\n              lineHeight: '1.4'\n            }}>\n              ⚠️ 홈으로 이동하면 이곳의 내용이 전부 새로고침됩니다. 중요한 정보는 다운로드와 복사해놓으세요\n            </div>\n          </div>\n      </div>\n    </main>\n  );\n}\n"
        }
    ]
}